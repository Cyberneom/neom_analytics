import 'dart:convert';

import 'package:enum_to_string/enum_to_string.dart';
import 'package:geolocator/geolocator.dart';
import 'package:get/get.dart';
import 'package:spotify/spotify.dart';

import '../../app_flavour.dart';
import '../../utils/app_utilities.dart';
import '../../utils/constants/app_constants.dart';
import '../../utils/constants/app_translation_constants.dart';
import '../../utils/core_utilities.dart';
import '../../utils/enums/itemlist_type.dart';
import 'app_item.dart';
import 'app_media_item.dart';
import 'app_release_item.dart';
import 'neom/chamber_preset.dart';

class Itemlist {

  String id; //Generated by firestore or third-party playlist Id
  String name;
  String description;
  String ownerId;
  String ownerName;
  String href; ///Reference to something in future
  String imgUrl;
  bool public;
  String uri; /// A link to the Web API endpoint providing full details of the playlist.
  // List<AppItem>? appItems;
  List<AppReleaseItem>? appReleaseItems;
  List<ChamberPreset>? chamberPresets;
  List<AppMediaItem>? appMediaItems;
  ItemlistType type;
  Position? position;

  Itemlist({
    this.id = "",
    this.name = "",
    this.description = "",
    this.href = "",
    this.imgUrl = "",
    this.ownerId = "",
    this.ownerName = "",
    this.public = true,
    this.uri = "",
    this.appMediaItems,
    this.chamberPresets,
    this.type = ItemlistType.playlist,
    this.position,
  });

  Itemlist.createBasic(this.name, desc) :
    id = "",
    description = desc,
    href = "",
    imgUrl = "",
    public = true,
    uri = "",
    ownerId = '',
    ownerName = '',
    appMediaItems = [],
    chamberPresets = [],
    type = ItemlistType.playlist;

  Itemlist.fromJSON(data) :
    id = data["id"] ?? "",
    name = data["name"] ?? "",
    description = data["description"] ?? "",
    href = data["href"] ?? "",
    imgUrl = data["imgUrl"] ?? "",
    public = data["public"] ?? true,
    ownerId = data["ownerId"] ?? "",
    ownerName = data["ownerName"] ?? "",
    uri = data["uri"],
    appMediaItems =  data["appMediaItems"]?.map<AppMediaItem>((item) {
      return AppMediaItem.fromJSON(item);
    }).toList(),
    appReleaseItems =  data["appReleaseItems"]?.map<AppReleaseItem>((item) {
      return AppReleaseItem.fromJSON(item);
    }).toList() ?? [],
    chamberPresets =  data["chamberPresets"]?.map<ChamberPreset>((preset) {
      return ChamberPreset.fromJSON(preset);
    }).toList() ?? [],
    position = CoreUtilities.JSONtoPosition(data["position"]),
    type = EnumToString.fromString(ItemlistType.values, data["type"] ?? ItemlistType.playlist.name) ?? ItemlistType.playlist;


  @override
  String toString() {
    return 'Itemlist{id: $id, name: $name, description: $description, href: $href, imgUrl: $imgUrl, public: $public, uri: $uri, appMediaItems: $appMediaItems';
  }

  Map<String, dynamic>  toJSON()=>{
    //'id': id, generated in firebase
    'name': name,
    'description': description,
    'href': href,
    'imgUrl': imgUrl,
    'ownerId': ownerId,
    'public': public,
    'uri': uri,
    'appMediaItems': appMediaItems?.map((appMediaItem) => appMediaItem.toJSON()).toList() ?? [],
    'appReleaseItems': appReleaseItems?.map((appReleaseItem) => appReleaseItem.toJSON()).toList() ?? [],
    'chamberPresets': chamberPresets?.map((appReleaseItem) => appReleaseItem.toJSON()).toList() ?? [],
    'position': jsonEncode(position),
  };

  static Future<Itemlist> mapPlaylistToItemlist(Playlist playlist) async {
    AppUtilities.logger.i("Mapping Spotify Playlist ${playlist.name} to Itemlist");
    List<AppMediaItem> appMediaItems = [];

    try {
      if (playlist.tracks != null && (playlist.tracks?.total ?? 0) > 1) {
        appMediaItems = await AppMediaItem.mapTracksToSongs(playlist.tracks!);
      }
    } catch (e) {
      AppUtilities.logger.e(e.toString());
    }

    return Itemlist(
      id: playlist.id ?? "",
      name: playlist.name ?? "",
      description: playlist.description ?? "",
      href: playlist.href ?? "",
      imgUrl: playlist.images?.first.url ?? "",
      public: playlist.public ?? true,
      uri: playlist.uri ?? "",
      appMediaItems: appMediaItems
    );
  }

  Itemlist.mapPlaylistSimpleToItemlist(PlaylistSimple playlist) :
    id = playlist.id ?? "",
    name = playlist.name ?? "",
    description = playlist.description ?? "",
    href = playlist.href ?? "",
    imgUrl = (playlist.images?.isNotEmpty ?? false) ? playlist.images?.first.url ?? "" : "",
    public = playlist.public ?? true,
    uri = playlist.uri ?? "",
    ownerId = '',
    ownerName = '',
    type = ItemlistType.playlist;

  int getTotalItems() {

    int totalItems = 0;

    if(appMediaItems != null) {
      totalItems = totalItems + (appMediaItems?.length ?? 0);
    }

    if(appReleaseItems != null) {
      totalItems = totalItems + (appReleaseItems?.length ?? 0);
    }

    if(chamberPresets != null) {
      totalItems = totalItems + (chamberPresets?.length ?? 0);
    }

    AppUtilities.logger.v("Retrieving $totalItems Total Items.");
    return totalItems;
  }

  List<String> getImgUrls() {

    List<String> imgUrls = [];

    if(imgUrl.isNotEmpty) {
      imgUrls.add(imgUrl);
    }

    if(appMediaItems != null) {
      for (var element in appMediaItems!) {
        if(element.imgUrl.isNotEmpty) {
          imgUrls.add(element.imgUrl);
        } else if(element.allUrls?.isNotEmpty ?? false) {
          imgUrls.add(element.allUrls!.first);
        }
      }
    }

    if(appReleaseItems != null) {
      for (var element in appReleaseItems!) {
        if(element.imgUrl.isNotEmpty) {
          imgUrls.add(element.imgUrl);
        } else if(element.ownerImgUrl.isNotEmpty) {
          imgUrls.add(element.ownerImgUrl);
        }
      }

    }

    if(chamberPresets != null) {
      for (var element in chamberPresets!) {
        if(element.imgUrl.isNotEmpty) {
          imgUrls.add(element.imgUrl);
        }
      }
    }

    AppUtilities.logger.v("Retrieving ${imgUrls.length} total Images for itemlist ${name}.");
    return imgUrls;
  }

  ///DEPRECATED
  // Itemlist.myFirstItemlist() :
  //   id = AppConstants.myFavorites,
  //   name = AppTranslationConstants.myFavItemlistName.tr,
  //   description = AppTranslationConstants.myFavItemlistDesc.tr,
  //   href = "",
  //   imgUrl = "",
  //   public = false,
  //   uri = "",
  //   appMediaItems = [],
  //   type = ItemlistType.playlist;
  //
  // Itemlist.myFirstItemlistFan() :
  //   id = AppConstants.myFavorites,
  //   name = AppTranslationConstants.myFavItemlistName.tr,
  //   description = AppTranslationConstants.myFavItemlistFanDesc.tr,
  //   href = "",
  //   imgUrl = "",
  //   public = false,
  //   uri = "",
  //   appMediaItems = [],
  //   chamberPresets = [],
  //   type = ItemlistType.playlist;

}
