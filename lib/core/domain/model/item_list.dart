import 'package:get/get.dart';
import 'package:spotify/spotify.dart';

import '../../app_flavour.dart';
import '../../utils/app_utilities.dart';
import '../../utils/constants/app_constants.dart';
import '../../utils/constants/app_translation_constants.dart';
import '../../utils/enums/itemlist_type.dart';
import 'app_item.dart';
import 'app_release_item.dart';
import 'neom/chamber_preset.dart';

class Itemlist {

  String id; //Generated by firestore or third-party playlist Id
  String name;
  String description = "";
  String ownerId = "";
  String href;
  String imgUrl;
  bool public;
  String uri; // A link to the Web API endpoint providing full details of the playlist.
  List<AppItem>? appItems;
  List<AppReleaseItem>? appReleaseItems;
  List<ChamberPreset>? chamberPresets;
  bool isFav = false;
  ItemlistType type = ItemlistType.playlist;

  Itemlist({
    this.id = "",
    this.name = "",
    this.description = "",
    this.href = "",
    this.imgUrl = "",
    this.ownerId = "",
    this.public = true,
    this.uri = "",
    this.appItems,
    this.isFav = false
  });


  Itemlist.myFirstItemlist() :
    id = AppConstants.firstItemlist,
    name = AppTranslationConstants.myFirstItemlistName.tr,
    description = AppTranslationConstants.myFirstItemlistDesc.tr,
    href = "",
    imgUrl = "",
    public = true,
    uri = "",
    appItems = [],//AppFlavour.getFirstAppItem(), ///VERIFY IF ITS Better to have empty first list
    isFav = true;


  Itemlist.myFirstItemlistFan() :
        id = AppConstants.firstItemlist,
        name = AppTranslationConstants.myFirstItemlistName.tr,
        description = AppTranslationConstants.myFirstItemlistFanDesc.tr,
        href = "",
        imgUrl = "",
        public = true,
        uri = "",
        appItems = [],//AppFlavour.getFirstAppItem(), ///VERIFY IF ITS Better to have empty first list
        isFav = true;


  Itemlist.createBasic(this.name, desc) :
    id = "",
    description = desc,
    href = "",
    imgUrl = "",
    ownerId = "",
    public = true,
    uri = "",
    appItems = [],
    appReleaseItems = [],
    chamberPresets = [],
    isFav = false;


  Itemlist.fromJSON(data) :
    id = data["id"] ?? "",
    name = data["name"] ?? "",
    description = data["description"] ?? "",
    href = data["href"] ?? "",
    imgUrl = data["imgUrl"] ?? "",
    public = data["public"] ?? true,
    ownerId = data["ownerId"] ?? "",
    uri = data["uri"],
    isFav = data["isFav"] ?? false,
    appItems =  data["appItems"]?.map<AppItem>((item) {
      return AppItem.fromJSON(item);
    }).toList() ?? data["songs"]?.map<AppItem>((item) {
      return AppItem.fromJSON(item);
    }).toList() ?? [],
    appReleaseItems =  data["appReleaseItems"]?.map<AppReleaseItem>((item) {
      return AppReleaseItem.fromJSON(item);
    }).toList() ?? [],
    chamberPresets =  data["chamberPresets"]?.map<ChamberPreset>((preset) {
      return ChamberPreset.fromJSON(preset);
    }).toList() ?? [];


  @override
  String toString() {
    return 'Itemlist{id: $id, name: $name, description: $description, href: $href, imgUrl: $imgUrl, public: $public, uri: $uri, appItems: $appItems, isFav: $isFav}';
  }

  Map<String, dynamic>  toJSON()=>{
    //'id': id, generated in firebase
    'name': name,
    'description': description,
    'href': href,
    'imgUrl': imgUrl,
    'ownerId': ownerId,
    'public': public,
    'uri': uri,
    'appItems': appItems?.map((appItem) => appItem.toJSON()).toList() ?? [],
    'appReleaseItems': appReleaseItems?.map((appReleaseItem) => appReleaseItem.toJSON()).toList() ?? [],
    'chamberPresets': chamberPresets?.map((appReleaseItem) => appReleaseItem.toJSON()).toList() ?? [],
    'isFav': isFav
  };

  static Future<Itemlist> mapPlaylistToItemlist(Playlist playlist) async {
    AppUtilities.logger.i("Mapping Spotify Playlist ${playlist.name} to Itemlist");
    List<AppItem> songs = [];

    try {
      if (playlist.tracks != null && (playlist.tracks?.total ?? 0) > 1) {
        songs = await AppItem.mapTracksToSongs(playlist.tracks!);
      }
    } catch (e) {
      AppUtilities.logger.e(e.toString());
    }

    return Itemlist(
        id: playlist.id ?? "",
        name: playlist.name ?? "",
        description: playlist.description ?? "",
        href: playlist.href ?? "",
        imgUrl: playlist.images?.first.url ?? "",
        public: playlist.public ?? true,
        uri: playlist.uri ?? "",
        appItems: songs);

  }

  Itemlist.mapPlaylistSimpleToItemlist(PlaylistSimple playlist) :
        id = playlist.id ?? "",
        name = playlist.name ?? "",
        description = playlist.description ?? "",
        href = playlist.href ?? "",
        imgUrl = (playlist.images?.isNotEmpty ?? false) ? playlist.images?.first.url ?? "" : "",
        public = playlist.public ?? true,
        uri = playlist.uri ?? "";

  int getTotalItems() {

    int totalItems = 0;

    if(appItems != null) {
      totalItems = totalItems + (appItems?.length ?? 0);
    }

    if(appReleaseItems != null) {
      totalItems = totalItems + (appReleaseItems?.length ?? 0);
    }

    if(chamberPresets != null) {
      totalItems = totalItems + (chamberPresets?.length ?? 0);
    }

    AppUtilities.logger.v("Retrieving $totalItems Total Items.");
    return totalItems;
  }

  List<String> getImgUrls() {

    List<String> imgUrls = [];

    if(imgUrl.isNotEmpty) {
      imgUrls.add(imgUrl);
    }

    if(appItems != null) {
      appItems!.forEach((element) {
        if(element.albumImgUrl.isNotEmpty) {
          imgUrls.add(element.albumImgUrl);
        } else if(element.artistImgUrl.isNotEmpty) {
          imgUrls.add(element.artistImgUrl);
        }
      });
    }

    if(appReleaseItems != null) {
      appReleaseItems!.forEach((element) {
        if(element.imgUrl.isNotEmpty) {
          imgUrls.add(element.imgUrl);
        } else if(element.ownerImgUrl.isNotEmpty) {
          imgUrls.add(element.ownerImgUrl);
        }
      });

    }

    if(chamberPresets != null) {
      for (var element in chamberPresets!) {
        if(element.imgUrl.isNotEmpty) {
          imgUrls.add(element.imgUrl);
        }
      }
    }

    AppUtilities.logger.v("Retrieving ${imgUrls.length} total Images for itemlist ${name}.");
    return imgUrls;
  }

}
